/*------------------------------- include --------------------------------------------------*/
#include "Init_TIMER.h"
#include "Init_USART.h"
#include "Ctrl_RUDDER.h"

/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;
*
*       Programs function: Timer Interrupt to control speed of rudders' rotate speed
*       Functions name: Init_TIMER2(void)         TIM2 Configuration
*                                   TIM2_IRQHandler(void)       TIM2 Interrupt service function
*
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;*/
/* Define parameters -------------------------------------------------------------*/
//extern u8 Uart1_Buffer[UART1_BUF_SIZE];
extern float AngelSet_LEFT_UP_Buf;
extern float AngelSet_RIGHT_UP_Buf;
extern float AngelSet_LEFT_DOWN_Buf;
extern float AngelSet_RIGHT_DOWN_Buf;
extern float AngelSet_HORIZ_LEFT_Buf;
extern float AngelSet_HORIZ_RIGHT_Buf;
extern float SpeedSet_MOTOR_Buf;
extern u8 Warning_Flag;       //Safe:0x00; Danger:0xFF
extern u8 ReceiveBuf[UART2_BUF_SIZE];	//Receive data temp buffer area

/*--------------------------- Timer2(TIM2)      TIM2 Configuration ---------------------------------*/
void Init_TIMER2(void)
{
        //Define structures for initiation
        TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
        NVIC_InitTypeDef NVIC_InitStrue;
        
        //Enable TIM2 clock
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
        
        //Timer Initiation
        TIM_TimeBaseInitStructure.TIM_Period = 1000-1;      //Config auto-reload register's value, timing cycle is 100ms
        TIM_TimeBaseInitStructure.TIM_Prescaler = 7200-1;    //若自定义预分频系数为0，则定时器的时钟频率为72M提供给定时器的时钟	0~65535之间
        TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;     //Clock division is 0
        TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;         ////TIM向上计数模式 从0开始向上计数，计数到1000后产生更新事件
        TIM_TimeBaseInit(TIM2, &TIM_TimeBaseInitStructure);
        
        //Clear update interrupt flag
        TIM_ClearFlag(TIM2, TIM_FLAG_Update);
        
        //Config enable update interrupt
        TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
        
        //Config priority of interruption
        NVIC_InitStrue.NVIC_IRQChannel = TIM2_IRQn;
        NVIC_InitStrue.NVIC_IRQChannelCmd = ENABLE;
        NVIC_InitStrue.NVIC_IRQChannelPreemptionPriority = 2;
        NVIC_InitStrue.NVIC_IRQChannelSubPriority = 2;
        NVIC_Init(&NVIC_InitStrue);
        
        NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
        
        //Enable TIM2
        TIM_Cmd(TIM2, ENABLE);
}

/*---------------------------------- Timer2(TIM2)      Interrupt service function ---------------------------------*/
void TIM2_IRQHandler(void)      //change 0.5 degree rudder angle, everytime in interrupt seivice function(20ms)卡舵代码段
{
        if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
        {
                //Clear interruption pending bit
                TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
                if (Warning_Flag == 0x00)
                {
                        //PWM control steering engines
									if(ReceiveBuf[33] == 0x00)
                        Ctrl_RUDDER(LEFT_UP, AngelSet_LEFT_UP_Buf);      //PD12
									if(ReceiveBuf[34] == 0x00)
                        Ctrl_RUDDER(RIGHT_UP, AngelSet_RIGHT_UP_Buf);      //PD13
									if(ReceiveBuf[35] == 0x00)
                        Ctrl_RUDDER(LEFT_DOWN, AngelSet_LEFT_DOWN_Buf);      //PD14
									if(ReceiveBuf[36] == 0x00)
                        Ctrl_RUDDER(RIGHT_DOWN, AngelSet_RIGHT_DOWN_Buf);     //PD15
                        Ctrl_RUDDER(HORIZ_LEFT, AngelSet_HORIZ_LEFT_Buf);     //PC6
                        Ctrl_RUDDER(HORIZ_RIGHT, AngelSet_HORIZ_RIGHT_Buf);     //PC7
                        //PWM control motor
                        Ctrl_MOTOR(SpeedSet_MOTOR_Buf);     //PC8
                }
                else
                {
                        //PWM control steering engines
                        Ctrl_RUDDER(LEFT_UP, AngelSet_LEFT_UP_RESET);      //PD12
                        Ctrl_RUDDER(RIGHT_UP, AngelSet_RIGHT_UP_RESET);      //PD13
                        Ctrl_RUDDER(LEFT_DOWN, AngelSet_LEFT_DOWN_RESET);      //PD14
                        Ctrl_RUDDER(RIGHT_DOWN, AngelSet_RIGHT_DOWN_RESET);     //PD15
                        Ctrl_RUDDER(HORIZ_LEFT, AngelSet_HORIZ_LEFT_RESET);     //PC6
                        Ctrl_RUDDER(HORIZ_RIGHT, AngelSet_HORIZ_RIGHT_RESET);     //PC7
                        //PWM control motor
                        Ctrl_MOTOR(SpeedSet_MOTOR_RESET);     //PC8
                }
        }
}










